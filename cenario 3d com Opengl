 #include <GL/glut.h>
#include <stdlib.h>
#include <stdio.h>


float angulo = 30.0;
float anguloX = 0.0;
float anguloY = 0.0;
float fAspect = 0.0;

GLfloat light_position[] = {0, 4,0.40, 0};  // Posicione a lâmpada acima da mesa

// Variáveis globais para iluminação
GLfloat luzAmbiente[] = {0.1, 0.06, 0.06, 1.0};
GLfloat luzDifusa[] = {0.3, 0.3, 0.3, 1.0};
GLfloat luzEspecular[] = {0.5, 0.5, 0.5, 1.0};



void chao() {
	
		// Cores do material
	GLfloat camurcaAmbiente[] = {0.6, 0.3, 0.1, 1.0};    // Cor ambiente da camurça
	GLfloat camurcaDifusa[] = {0.6, 0.3, 0.1, 1.0};      // Cor difusa da camurça
	GLfloat camurcaEspecular[] = {0.2, 0.2, 0.2, 1.0};   // Cor especular da camurça
	GLfloat brilho = 0.0;                                  // Brilho do material
	
	// Aplicação das cores do material
	glMaterialfv(GL_FRONT, GL_AMBIENT, camurcaAmbiente);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, camurcaDifusa);
	glMaterialfv(GL_FRONT, GL_SPECULAR, camurcaEspecular);
	glMaterialf(GL_FRONT, GL_SHININESS, brilho);

    glColor3f(0.47, 0.79, 0.47);
    glPushMatrix();
    glTranslated(0.5, 0.2, 0.3);
    glScaled(2.0, 0.2, 2.0);
    glutSolidCube(1.0);
    glPopMatrix();
}

void paredeFundo() {
	GLfloat gessoAmbiente[] = {0.9, 0.9, 0.9, 1.0};    // Cor ambiente do gesso
	GLfloat gessoDifusa[] = {0.9, 0.9, 0.9, 1.0};      // Cor difusa do gesso
	GLfloat gessoEspecular[] = {0.2, 0.2, 0.2, 1.0};   // Cor especular do gesso
	GLfloat brilho = 0.0;                                // Brilho do material
	
	// Aplicação das cores do material
	glMaterialfv(GL_FRONT, GL_AMBIENT, gessoAmbiente);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, gessoDifusa);
	glMaterialfv(GL_FRONT, GL_SPECULAR, gessoEspecular);
	glMaterialf(GL_FRONT, GL_SHININESS, brilho);

    glColor3f(0.5, 0.5, 0.5);
    glPushMatrix();
    glTranslated(0.5, 1.10, -0.7);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(2.0, 0.03, 2.0);
    glutSolidCube(1.0);
    glPopMatrix();
}

void paredeFrente() {
	GLfloat gessoAmbiente[] = {0.9, 0.9, 0.9, 1.0};    // Cor ambiente do gesso
	GLfloat gessoDifusa[] = {0.9, 0.9, 0.9, 1.0};      // Cor difusa do gesso
	GLfloat gessoEspecular[] = {0.2, 0.2, 0.2, 1.0};   // Cor especular do gesso
	GLfloat brilho = 0.0;                                // Brilho do material
	
	// Aplicação das cores do material
	glMaterialfv(GL_FRONT, GL_AMBIENT, gessoAmbiente);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, gessoDifusa);
	glMaterialfv(GL_FRONT, GL_SPECULAR, gessoEspecular);
	glMaterialf(GL_FRONT, GL_SHININESS, brilho);
    glColor3f(0.5, 0.5, 0.5);
    glPushMatrix();
    glTranslated(-0.529, 1.10, 0.296);//(esquerda direita,cima baixo,frente fundo)
    glRotated(90.0, 0.0, 1.0, 0.0);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(2.0, 0.06, 2.0);//(x,grossura,z)
    glutSolidCube(1.0);
    glPopMatrix();
}

void estante() {
	
		// Cores do material
	GLfloat madeiraEscuraAmbiente[] = {0.2, 0.1, 0.0, 1.0};  // Cor ambiente da madeira escura
	GLfloat madeiraEscuraDifusa[] = {0.2, 0.1, 0.0, 1.0};    // Cor difusa da madeira escura
	GLfloat madeiraEscuraEspecular[] = {0.1, 0.1, 0.1, 1.0}; // Cor especular da madeira escura
	GLfloat brilho = 0.0;                                     // Brilho do material
	
	// Aplicação das cores do material
	glMaterialfv(GL_FRONT, GL_AMBIENT, madeiraEscuraAmbiente);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, madeiraEscuraDifusa);
	glMaterialfv(GL_FRONT, GL_SPECULAR, madeiraEscuraEspecular);
	glMaterialf(GL_FRONT, GL_SHININESS, brilho);
    // Fundo
    glColor3f(0.50, 0.30, 0.10);
    glPushMatrix();
    glTranslated(0.5, 1.15, -0.7);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(0.7, 0.02, 0.86);
    glutSolidCube(2.0);
    glPopMatrix();

    // Lateral traseira
    glPushMatrix();
    glTranslated(-0.2, 1.15, -0.6);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(0.04, 0.12, 0.86);
    glutSolidCube(2.0);
    glPopMatrix();

    // Lateral frontal
    glPushMatrix();
    glTranslated(1.2, 1.15, -0.6);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(0.04, 0.12, 0.86);
    glutSolidCube(2.0);
    glPopMatrix();

    // Topo
    glPushMatrix();
    glTranslated(0.5, 1.95, -0.58);
    glScaled(0.7, 0.06, 0.10);
    glutSolidCube(2.0);
    glPopMatrix();

    // Meio
    glPushMatrix();
    glTranslated(0.5, 1.15, -0.58);
    glScaled(0.7, 0.06, 0.10);
    glutSolidCube(2.0);
    glPopMatrix();

    // Base
    glPushMatrix();
    glTranslated(0.5, 0.35, -0.58);
    glScaled(0.7, 0.06, 0.10);
    glutSolidCube(2.0);
    glPopMatrix();
}




void telapc() {
	
	// Cores do material
	GLfloat vidroAmbiente[] = {0.1, 0.1, 0.1, 0.5};   // Cor ambiente do vidro
	GLfloat vidroDifusa[] = {0.8, 0.8, 0.8, 0.5};     // Cor difusa do vidro
	GLfloat vidroEspecular[] = {1.0, 1.0, 1.0, 0.5};  // Cor especular do vidro
	GLfloat brilho = 2.0;                             // Brilho do material
	
	// Aplicação das cores do material
	glMaterialfv(GL_FRONT, GL_AMBIENT, vidroAmbiente);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, vidroDifusa);
	glMaterialfv(GL_FRONT, GL_SPECULAR, vidroEspecular);
	glMaterialf(GL_FRONT, GL_SHININESS, brilho);

    float x = -0.50, y = 1.2, z = 0.40;
    glPushMatrix();
    glColor3f(0.0, 0.8, 0.990);
    glTranslated(x, y, z);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(0.06, 0.9, 0.5);
    glutSolidCube(1.0);
    glPopMatrix();
}

void mesa() {
	
	
	GLfloat madeiraAmbiente[] = {0.6, 0.3, 0.1, 1.0};   // Cor ambiente da madeira
	GLfloat madeiraDifusa[] = {0.6, 0.3, 0.1, 1.0};     // Cor difusa da madeira
	GLfloat madeiraEspecular[] = {0.2, 0.2, 0.2, 1.0};  // Cor especular da madeira
	GLfloat brilho = 0.0;                              // Brilho do material
	
	// Aplicação das cores do material
	glMaterialfv(GL_FRONT, GL_AMBIENT, madeiraAmbiente);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, madeiraDifusa);
	glMaterialfv(GL_FRONT, GL_SPECULAR, madeiraEspecular);
	glMaterialf(GL_FRONT, GL_SHININESS, brilho);


    glColor3f(0.50, 0.30, 0.10);

    // Tampa
    glPushMatrix();
    glTranslated(-0.29, 0.8,0.4);
    glScaled(0.5, 0.05, 1.5);
    glutSolidCube(1.0);
    glPopMatrix();

   

    // Pé esquerdo frente
    glPushMatrix();
    glTranslated(-0.29, 0.5, 1.15);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(0.5, 0.05, 0.64);
    glutSolidCube(1.0);
    glPopMatrix();


    // Pé direito frente
    glPushMatrix();
    glTranslated(-0.29, 0.5, -0.35);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(0.5, 0.05, 0.64);
    glutSolidCube(1.0);
    glPopMatrix();
}

void teclado(){
	
		// Cores do material
	GLfloat plasticoPretoAmbiente[] = {0.0, 0.0, 0.0, 1.0};  // Cor ambiente do plástico preto
	GLfloat plasticoPretoDifusa[] = {0.0, 0.0, 0.0, 1.0};    // Cor difusa do plástico preto
	GLfloat plasticoPretoEspecular[] = {0.1, 0.1, 0.1, 1.0}; // Cor especular do plástico preto
	GLfloat brilho = 0.5;                                      // Brilho do material
	
	// Aplicação das cores do material
	glMaterialfv(GL_FRONT, GL_AMBIENT, plasticoPretoAmbiente);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, plasticoPretoDifusa);
	glMaterialfv(GL_FRONT, GL_SPECULAR, plasticoPretoEspecular);
	glMaterialf(GL_FRONT, GL_SHININESS, brilho);

	glPushMatrix();
    glTranslated(-0.29, 0.83,0.40);
    glScaled(0.2, 0.01, 0.5);
    glutSolidCube(1.0);
    glPopMatrix();
    
    //plasticotela
     float x = -0.51, y = 1.2, z = 0.40;
    glPushMatrix();
    glColor3f(0.0, 0.8, 0.990);
    glTranslated(x, y, z);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(0.07, 0.95, 0.6);
    glutSolidCube(1.0);
    glPopMatrix();
    
    //suporte tela
    glPushMatrix();
    glColor3f(0.0, 0.8, 0.990);
    glTranslated(-0.51,  1.1, 0.40);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(0.07, 0.04, 0.6);
    glutSolidCube(1.0);
    glPopMatrix();
    
    //suporte base
    
	glPushMatrix();
    glTranslated(-0.49, 0.85,0.40);
    glScaled(0.1, 0.03, 0.4);
    glutSolidCube(1.0);
    glPopMatrix();

}
void computador(){
	
	// Cores do material
	GLfloat plasticoPretoAmbiente[] = {0.0, 0.0, 0.0, 1.0};  // Cor ambiente do plástico preto
	GLfloat plasticoPretoDifusa[] = {0.0, 0.0, 0.0, 1.0};    // Cor difusa do plástico preto
	GLfloat plasticoPretoEspecular[] = {0.1, 0.1, 0.1, 1.0}; // Cor especular do plástico preto
	GLfloat brilho = 1.5;                                      // Brilho do material
	
	// Aplicação das cores do material
	glMaterialfv(GL_FRONT, GL_AMBIENT, plasticoPretoAmbiente);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, plasticoPretoDifusa);
	glMaterialfv(GL_FRONT, GL_SPECULAR, plasticoPretoEspecular);
	glMaterialf(GL_FRONT, GL_SHININESS, brilho);
	
	 // Pé esquerdo frente
    glPushMatrix();
    glTranslated(-0.29, 1.1, -0.23);
    glRotated(-90.0, 1.0, 0.0, 0.0);
    glScaled(0.5, 0.2, 0.64);
    glutSolidCube(1.0);
    glPopMatrix();


}
void cama() {
			
				/// Cores do material
		GLfloat panoVermelhoAmbiente[] = {0.5, 0.0, 0.0, 1.0};   // Cor ambiente do pano vermelho
		GLfloat panoVermelhoDifusa[] = {0.8, 0.0, 0.0, 1.0};     // Cor difusa do pano vermelho
		GLfloat panoVermelhoEspecular[] = {0.2, 0.2, 0.2, 1.0};  // Cor especular do pano vermelho
		GLfloat brilho = 3.0;                                   // Brilho do material
		
		// Aplicação das cores do material
		glMaterialfv(GL_FRONT, GL_AMBIENT, panoVermelhoAmbiente);
		glMaterialfv(GL_FRONT, GL_DIFFUSE, panoVermelhoDifusa);
		glMaterialfv(GL_FRONT, GL_SPECULAR, panoVermelhoEspecular);
		glMaterialf(GL_FRONT, GL_SHININESS, brilho);
		glColor3f(0.50, 0.30, 0.10);
		
		//cama
		glPushMatrix();
		glTranslated(1.1, 0.4, 0.3); // Posição da tampa da cama
		glScaled(0.8, 0.4, 2);
		glutSolidCube(1.0);
		glPopMatrix();
		



   
}



void iluminacao() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_LIGHT1);
    glEnable(GL_DEPTH_TEST);

    // Luz ambiente suave
    glLightfv(GL_LIGHT0, GL_AMBIENT, luzAmbiente);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, luzDifusa);
    glLightfv(GL_LIGHT0, GL_SPECULAR, luzEspecular);

    // Luz da lâmpada
    GLfloat luzLampadaAmbiente[] = {0.05, 0.05, 0.05, 1.0}; // Reduzido para evitar cores muito claras
    GLfloat luzLampadaDifusa[] = {0.4,0.4, 0.4, 0.4};
    GLfloat luzLampadaEspecular[] = {0.7, 0.8, 0.8, 0.8};

    glLightfv(GL_LIGHT1, GL_AMBIENT, luzLampadaAmbiente);
    glLightfv(GL_LIGHT1, GL_DIFFUSE, luzLampadaDifusa);
    glLightfv(GL_LIGHT1, GL_SPECULAR, luzLampadaEspecular);

    // Posição da luz da lâmpada
    GLfloat luzLampadaPosicao[] = {0.6, 4,0.3, 0};
    glLightfv(GL_LIGHT1, GL_POSITION, luzLampadaPosicao);

    // Defina a direção da luz da lâmpada (apontando para baixo)
    GLfloat direcaoSpot[] = {-1, -1, 0};
    glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION, direcaoSpot);
    glLightf(GL_LIGHT1, GL_SPOT_CUTOFF,10.0);    // Ângulo de abertura do cone de luz
    glLightf(GL_LIGHT1, GL_SPOT_EXPONENT,20.0); // Expoente de atenuação da luz
}


void parametrosVisualizacao() {
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(angulo, fAspect, 0.1, 500);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(5.0, 5.0, 5.0, 0, 1, 0, 0.0, 1.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
}

void moveCamera(int key, int x, int y) {
    if (key == GLUT_KEY_UP) {
        anguloY -= 1;
    } else if (key == GLUT_KEY_DOWN) {
        anguloY += 1;
    } else if (key == GLUT_KEY_LEFT) {
        anguloX -= 1;
    } else if (key == GLUT_KEY_RIGHT) {
        anguloX += 1;
    }

    parametrosVisualizacao();
    glutPostRedisplay();
}

void inicializa() {
    angulo = 30;
 
}

void alteraTamanhoJanela(int w, int h) {
    if (h == 0) h = 1;
    glViewport(0, 0, w, h);
    fAspect = (float)w / h;
    parametrosVisualizacao();
}

void gerenciaMouse(int button, int state, int x, int y) {
    if (button == GLUT_RIGHT_BUTTON) {
        if (state == GLUT_DOWN && angulo < 170) {
            angulo += 5;
        }
    } else if (button == GLUT_LEFT_BUTTON) {
        if (state == GLUT_DOWN && angulo > 10) {
            angulo -= 5;
        }
    }

    parametrosVisualizacao();
    glutPostRedisplay();
}

void definirAtenuacaoLuz(int atenuacao) {
    GLfloat expoente;

    switch (atenuacao) {
        case 0:
            expoente = 0.0;  // Desligar a atenuação
            break;
        case 1:
            expoente = 10.0;  // 10% de atenuação
            break;
        case 2:
            expoente = 20.0;  // 20% de atenuação
            break;
        case 3:
            expoente = 30.0;  // 30% de atenuação
            break;
        // Adicione mais casos conforme necessário

        default:
            expoente = 10.0;  // Valor padrão (10% de atenuação)
            break;
    }

    glLightf(GL_LIGHT1, GL_SPOT_EXPONENT, expoente);
}


void desenhaPrincipal() {
    glRotated(anguloX, 0.0, 1.0, 0.0);
    glRotated(anguloY, 1.0, 0.0, 0.0);
    
    // Mantenha a luz ambiente
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, luzAmbiente);

    // Desative a luz 0 (luz ambiente) para evitar que o cenário fique em preto e branco
    glDisable(GL_LIGHT0);

    // Ative apenas a luz da lâmpada
    glEnable(GL_LIGHT1);

    // Defina a posição da lâmpada
    GLfloat luzLampadaPosicao[] = {light_position[0], light_position[1], light_position[2], 1.0};
    glLightfv(GL_LIGHT1, GL_POSITION, luzLampadaPosicao);

    // Defina a direção da lâmpada (apontando para baixo)
    GLfloat direcaoSpot[] = {0.0, -1.0, 0.0};
    glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION, direcaoSpot);

    // Defina o ângulo de abertura do cone de luz
    GLfloat anguloAbertura = 50.0;
    glLightf(GL_LIGHT1, GL_SPOT_CUTOFF, anguloAbertura);

    // Lâmpada acima da mesa
    glPushMatrix();
    glTranslated(light_position[0], light_position[1], light_position[2]);
    glColor3f(1.0, 1.0, 1.0);  // Cor da lâmpada
    glutSolidSphere(0.05, 20, 20);  // Use glutSolidSphere para criar uma lâmpada esférica
    glPopMatrix();

    chao();
    paredeFundo();
    paredeFrente();
    cama();
    telapc();
    mesa();
    teclado();
    computador();

    glFlush();
}






int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(1024, 768);
    glutCreateWindow("Ambiente 3D");
    glutDisplayFunc(desenhaPrincipal);
    glutReshapeFunc(alteraTamanhoJanela);
    glutSpecialFunc(moveCamera);
    glutMouseFunc(gerenciaMouse);
    inicializa();
   

    iluminacao();
    parametrosVisualizacao();
    glutMainLoop();
    return 0;
}
